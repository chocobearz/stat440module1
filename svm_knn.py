# -*- coding: utf-8 -*-
"""svm_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Iu2MYvuv01xy_glgqurSyNtwCoIaxEBd
"""

from sklearn.neighbors import KNeighborsRegressor
import pandas as pd
import numpy as np   # linear algebra
from math import sqrt
import matplotlib.pyplot as plt   # plotting
from sklearn.model_selection import train_test_split  # ML data splits
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler # ML preprocessing
from sklearn.metrics import mean_squared_error
from sklearn import neighbors
from sklearn.svm import SVR

# Read in the training/validation dataset
dataset = pd.read_csv('noNATrain2.csv', encoding='latin')
dataset = dataset.drop(dataset.columns[0], axis = 1)
dataset = dataset.loc[:, dataset.columns != 'dataset']
dataset.rename(columns={'temp_duration':'duration'}, inplace=True)
dataset

# Read in the testingdataset
testset = pd.read_csv('noNATest2.csv', encoding='latin')
id = testset.iloc[:, 0]
testset = testset.drop(testset.columns[0], axis = 1)
testset = testset.loc[:, testset.columns != 'dataset']
testset.rename(columns={'temp_duration':'duration'}, inplace=True)
testset

#preprocess categorical data for training/validate
# creating instance of labelencoder
labelencoder = LabelEncoder()
for (columnName, columnData) in dataset.iteritems():
   if columnName != 'clean_age' and columnName != 'duration':
   #if columnName != 'duration': 
     # Assigning numerical values and storing in another column
     dataset[columnName] = labelencoder.fit_transform(dataset[columnName])
dataset

#preprocess categorical data for testing
# creating instance of labelencoder
labelencoder = LabelEncoder()
for (columnName, columnData) in testset.iteritems():
   if columnName != 'clean_age' and columnName != 'duration':
   #if columnName != 'duration':
     # Assigning numerical values and storing in another column
     testset[columnName] = labelencoder.fit_transform(testset[columnName])
testset

# Separate the features (X) and target (y)
# Reshape so each item is a list of features/targets
X = dataset.loc[:, dataset.columns != 'duration']
X = dataset[['country', 'V1', 'confirmed', 'cough']]
y = dataset['duration'].values.reshape(-1, 1)
X_test = testset.loc[:, testset.columns != 'duration']
X_test = testset[['country', 'V1', 'confirmed', 'cough']]

# Split into training, validate sets (80%, 20%)
X_train, X_val, y_train, y_val=train_test_split(X, y, test_size=0.1, random_state=0)

rmse_val = [] #to store rmse values for different k
for K in range(100):
    K = K+1
    model = neighbors.KNeighborsRegressor(n_neighbors = K)

    model.fit(X_train, y_train)  #fit the model
    pred=model.predict(X_val) #make prediction on test set
    error = sqrt(mean_squared_error(y_val,pred)) #calculate rmse
    rmse_val.append(error) #store rmse values
    print('RMSE value for k= ' , K , 'is:', error)

#plotting the rmse values against k values
curve = pd.DataFrame(rmse_val) #elbow curve 
curve.plot()

# Train the model on the training data
knn_regressor = KNeighborsRegressor(n_neighbors=8)
knn_regressor.fit(X_train, y_train)

# Find Score (max is 1)
print("Training Score: {}".format(knn_regressor.score(X_train, y_train)))
print("Validation Score: {}".format(knn_regressor.score(X_val, y_val)))

# Create table to show differences in predicted salary
results = pd.DataFrame()
results['Predicted'] = knn_regressor.predict(X_val).reshape(-1)
results['RMSE'] = sqrt(mean_squared_error(y_val,results['Predicted']))
results

#run on full training after assessing the RMSE
# Initialize the knn regression model
knn_regressor = KNeighborsRegressor(n_neighbors=8)
# Train the model on the training data
model = knn_regressor.fit(X, y)

# Create table to show differences in predicted salary
finalPredsKnn = pd.DataFrame()
finalPredsKnn['Id'] = id
finalPredsKnn['duration'] = knn_regressor.predict(X_test).reshape(-1)
finalPredsKnn

finalPredsKnn.to_csv('predictionsknn.csv', index = False)

scale_X = StandardScaler()
scale_y = StandardScaler()
X = scale_X.fit_transform(X)
y = scale_y.fit_transform(y).reshape(-1)
X_test = scale_X.fit_transform(X_test)

# Split into training, validate sets (80%, 20%)
X_train, X_val, y_train, y_val=train_test_split(X, y, test_size=0.2, random_state=0)

# Initialize the SVR
svr_regressor = SVR(kernel = 'sigmoid')

# Train the model
svr_regressor.fit(X_train, y_train)

# Find Score (max is 1)
print("Training Score: {}".format(svr_regressor.score(X_train, y_train)))
print("Validation Score: {}".format(svr_regressor.score(X_val, y_val)))
# Create table to show differences in predicted salary
results = pd.DataFrame()
results['Predicted'] = svr_regressor.predict(X_val).reshape(-1)
results['Predicted'][results['Predicted'] < 0] = 0
results['RMSE'] = sqrt(mean_squared_error(y_val,results['Predicted']))
results

# Train the model
svr_regressor.fit(X, y)

# Create table to show differences in predicted salary
finalPredsSvm = pd.DataFrame()
finalPredsSvm['Id'] = id
finalPredsSvm['duration'] = svr_regressor.predict(X_test).reshape(-1)
finalPredsSvm['duration'][finalPredsSvm['duration'] < 0] = 0
finalPredsSvm

finalPredsSvm.to_csv('predictionssvm.csv', index = False)